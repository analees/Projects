import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

public class TicTacToe implements ActionListener {
	
	//DECLARATIONS
	
	//instance of randomclass
	Random random =new Random();
	
	//JFrame
	JFrame frame = new JFrame();
	
	//panel to hold the title
	JPanel title_panel = new JPanel();
	
	//panel to hold all the buttons
	JPanel button_panel = new JPanel();
	
	//label to hold text 
	JLabel textfield = new JLabel();
	
	//Array of JButtons
	JButton[] buttons = new JButton[9];
	
	//Boolean variable for player's turn 
	boolean player1_turn;
	
	
	//constructor for TicTacToe
	TicTacToe(){
		//create jframe
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(800,800);
		frame.getContentPane().setBackground(new Color(50,50,50));
		//layout for frame
		frame.setLayout(new BorderLayout());
		//set frame visibility to true
		frame.setVisible(true);
		
		//background color for text field
		textfield.setBackground(new Color(25,25,25));
		//color of text
		textfield.setForeground(new Color(25,255,0));
		//text font
		textfield.setFont(new Font("Ink Free", Font.BOLD,75));
		//Horizontal alignment
		textfield.setHorizontalAlignment(JLabel.CENTER);
		//Title of game
		textfield.setText("Tic-Tac-Toe");
		textfield.setOpaque(true);
		
		//TITLE PANEL to add to frame
		title_panel.setLayout(new BorderLayout());
		//bounds for the panel(x,y,length(size of frame),height)
		title_panel.setBounds(0, 0, 800, 100);
		
		//BUTTON PANEL
		
		//we have 9 buttons so we create a grid of dimensions 3 X 3
		button_panel.setLayout(new GridLayout(3,3));
		
		button_panel.setBackground(new Color(150,150,150));
		
		//for loop to add the 9 buttons
		for (int i=0;i<9;i++) {
			buttons[i]=new JButton();
			button_panel.add(buttons[i]);
			buttons[i].setFont(new Font("MV Boli", Font.BOLD,120));
			buttons[i].setFocusable(false);
			//add action listener to each button
			buttons[i].addActionListener(this);
			
			
		}
		
		//add text field to title panel
		title_panel.add(textfield);
		//add title to panel and position to the North
		frame.add(title_panel, BorderLayout.NORTH);
		//add button panel to frame
		frame.add(button_panel);
		
		//Call first turn method
		firstTurn();
	}
	
	
	//0verrides actionlistener
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		for(int i = 0; i<9;i++) {
			if (e.getSource()==buttons[i]) {
				if(player1_turn) {
					//check if button has text
					if (buttons[i].getText()==""){
						//red
						buttons[i].setForeground(new Color(255,0,0));
						buttons[i].setText("X");
						player1_turn=false;
						textfield.setText("O turn");
						check();
							
					}
				}
				else {
					//check if button has text
					if (buttons[i].getText()==""){
						//blue
						buttons[i].setForeground(new Color(0,0,255));
						buttons[i].setText("O");
						player1_turn=true;
						textfield.setText("X turn");
						check();
							
					}
					
				}
				
			}
		}
	}
	
	
	//method allocates a player to go first
	public void firstTurn() {
		//allow title to show b4 player's turn is assigned
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//random class picks a random integer between 0 and 1
		//0==player1 1==player2
		if (random.nextInt(2)==0) {
			player1_turn =true;
			textfield.setText("X turn");
		}
		else {
			player1_turn =false;
			textfield.setText("O turn");
			
		}
		
	}
	
	//checks if winning conditions were met
	public void check() {
		//checks the first row 
		//check O winning conditions
		if(
				(buttons[0].getText()=="O")&&
				(buttons[1].getText()=="O")&&
				(buttons[2].getText()=="O")
				){
			//call wins method
			Owins(0,1,2);}
			
		if(
				(buttons[3].getText()=="O")&&
				(buttons[4].getText()=="O")&&
				(buttons[5].getText()=="O")
				){
			//call wins method
			Owins(6,7,8);}
		if(
				(buttons[6].getText()=="O")&&
				(buttons[7].getText()=="O")&&
				(buttons[8].getText()=="O")
				){
			//call wins method
			Owins(6,7,8);}
		if(
				(buttons[0].getText()=="O")&&
				(buttons[3].getText()=="O")&&
				(buttons[6].getText()=="O")
				){
			//call wins method
			Owins(0,3,6);}
		if(
				(buttons[1].getText()=="O")&&
				(buttons[4].getText()=="O")&&
				(buttons[7].getText()=="O")
				){
			//call wins method
			Owins(1,4,7);}
		if(
				(buttons[2].getText()=="O")&&
				(buttons[5].getText()=="O")&&
				(buttons[8].getText()=="O")
				){
			//call wins method
			Owins(2,5,8);}
		
		if(
				(buttons[0].getText()=="O")&&
				(buttons[4].getText()=="O")&&
				(buttons[8].getText()=="O")
				){
			//call wins method
			Owins(0,4,8);}
		
		if(
				(buttons[2].getText()=="O")&&
				(buttons[4].getText()=="O")&&
				(buttons[6].getText()=="O")
				){
			//call wins method
			Owins(2,4,6);}
	
	}
	
	//conditions for X to win
	public void Xwins(int a, int b, int c) {
		//change color of winning combination 
		buttons[a].setBackground(Color.GREEN);
		buttons[b].setBackground(Color.GREEN);
		buttons[c].setBackground(Color.GREEN);
		
		//disable all buttons so people could stop playing
		for (int i =0; i<9; i++) {
			buttons[i].setEnabled(false);
		}
		textfield.setText("X wins");
		
	}
	
	//conditions for O to win
	public void Owins(int a, int b, int c) {
		//change color of winning combination 
				buttons[a].setBackground(Color.GREEN);
				buttons[b].setBackground(Color.GREEN);
				buttons[c].setBackground(Color.GREEN);
				
				//disable all buttons so people could stop playing
				for (int i =0; i<9; i++) {
					buttons[i].setEnabled(false);
				}
				textfield.setText("O wins");
				
		
	}


}
