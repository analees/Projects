lass Stack():
    # Declares an initially empty stack

    def __init__(self):
        self.size = 0
        self.stack = []
    # Pushes an item to the top of the stack
    def push(self, item):
        self.stack.append(item)
        self.size += 1
    # Removes the top item from the stack
    def pop(self):
        if (self.size <= 0):
            print("You are attempting to delete from an empty stack.")
            print("In a proper code environment we would throw an exception here")
        else:
            self.size -= 1
        return self.stack.pop()
    # Returns the top item of the stack (without removing it)
    def peek(self):
        if (self.size == 0):
            print("Currently the stack is empty!")
        else:
            return self.stack[self.size-1]
    # Returns the size of the stack
    def get_size(self):
        return self.size
    # Tostring method for the stack
    def __str__(self):
        result = ""
        for i in range(len(self.stack)-1,-1,-1):
            result += "Item %d: %s\n" % ((i + 1), self.stack[i])
        return result
    

        
        #function 
def are_pairs(first,second):
    if first =='[' and second ==']':
        return True
    if first == '{' and second =='}':
        return True
    if first =='(' and second == ')':
        return True
    return False 
        
def balance_check(the_sequence):
    stack=Stack()
    for i in range (len(the_sequence)):
        if the_sequence[i] =='[' or the_sequence[i] == '{' or the_sequence[i] == '(':
            stack.push(the_sequence[i])
        elif the_sequence[i] ==']' or the_sequence[i] == '}' or the_sequence[i] == ')':
            if (are_pairs (stack.peek(), the_sequence[i])) and stack.get_size() !=0:
                stack.pop()
            else:
                return False
    if stack.get_size() == 0:
        return True
    else:
        return False
                    
    
def main():
        
        print("Balance checking algorithm")
        # True
        print("The results of calling balance_check on ((())) is: %s" % balance_check("((()))"))
        # True
        print("The results of calling balance_check on (()()(())) is: %s" % 
        balance_check("(()()(()))"))
        # False
        print("The results of calling balance_check on ((()()()()) is: %s" % 
        balance_check("((()()()())"))
        # False
        print("The results of calling balance_check on ()(())((()()))) is: %s" % 
        balance_check("()(())((()())))"))
        # False
        print("The results of calling balance_check on ()()())(()() is: %s" % 
        balance_check("()()())(()()"))
        # Fail precondition check
        print("The results of calling balance check on \"\" is: %s" % 
        balance_check(""))
        # Fail precondition check
        print("The results of calling balance check on ()()()abc()() is: %s" % 
        balance_check("()()()abc()()"))
        # Fail precondition check
        print("The results of calling balance check on ()()()[()()] is: %s" % 
        balance_check("()()()[()()]"))
        print("\n********************\n")
        print("If you attempt the extra credit, place the testing calls here")
        print("The results of calling balance check on ({[]}) is: %s" % 
        balance_check("({[]})"))
        print("The results of calling balance check on ({[}]) is: %s" % 
        balance_check(" ({[}])"))
        print("The results of calling balance check on ({{{))) is: %s" % 
        balance_check("({{{)))"))
        print("The results of calling balance check on  {(){}[]}is: %s" % 
        balance_check(" {(){}[]}"))
        
main()
